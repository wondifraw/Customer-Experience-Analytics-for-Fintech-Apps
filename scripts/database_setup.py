import pandas as pd
import oracledb

# Database configuration
USERNAME = 'wonde'  
PASSWORD = '1234'   
DSN = 'localhost/XEPDB1'   

# File paths
CBE_PATH = '../data/processed/cbe_review.csv'
BOE_PATH = '../data/processed/boe_review.csv'
DASHEN_PATH = '../data/processed/dashen_review.csv'

def create_connection():
    """Create a connection to the Oracle database."""
    try:
        connection = oracledb.connect(user=USERNAME, password=PASSWORD, dsn=DSN)
        print("Database connection established.")
        return connection
    except oracledb.DatabaseError as e:
        print(f"Error establishing database connection: {str(e)}")
        raise

def create_tables(connection):
    """Create the Banks and Reviews tables in the database."""
    try:
        cursor = connection.cursor()
        
        # Create Banks table
        cursor.execute("""
        CREATE TABLE Banks (
            bank_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            bank_name VARCHAR2(50) NOT NULL
        )
        """)
        print("Banks table created successfully.")
        
        # Create Reviews table
        cursor.execute("""
        CREATE TABLE Reviews (
            review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            review_text CLOB,
            rating NUMBER,
            review_date DATE,
            bank_id NUMBER,
            FOREIGN KEY (bank_id) REFERENCES Banks(bank_id)
        )
        """)
        print("Reviews table created successfully.")
        
        connection.commit()
    except oracledb.DatabaseError as e:
        print(f"Error creating tables: {str(e)}")
        connection.rollback()
    finally:
        cursor.close()

def insert_banks(connection):
    """Insert bank names into the Banks table."""
    try:
        cursor = connection.cursor()
        banks = ['CBE', 'BOE', 'Dashen']
        
        for bank in banks:
            cursor.execute("INSERT INTO Banks (bank_name) VALUES (:1)", (bank,))
        
        connection.commit()
        print(f"Inserted {len(banks)} banks into the database.")
    except oracledb.DatabaseError as e:
        print(f"Error inserting banks: {str(e)}")
        connection.rollback()
    finally:
        cursor.close()

def insert_reviews(connection, reviews_path, bank_name):
    """Insert reviews into the Reviews table based on the bank."""
    try:
        cursor = connection.cursor()
        
        # Load the reviews DataFrame
        df = pd.read_csv(reviews_path)
        
        # Check and convert the date format if necessary
        if 'date' in df.columns:
            # Ensure the date column is in the correct format (YYYY-MM-DD)
            df['date'] = pd.to_datetime(df['date'], errors='coerce').dt.strftime('%Y-%m-%d')
        
        # Get bank_id from the Banks table
        cursor.execute("SELECT bank_id FROM Banks WHERE bank_name = :1", (bank_name,))
        bank_id = cursor.fetchone()[0]
        
        for _, row in df.iterrows():
            cursor.execute("""
            INSERT INTO Reviews (review_text, rating, review_date, bank_id)
            VALUES (:1, :2, TO_DATE(:3, 'YYYY-MM-DD'), :4)
            """, (row['review_text'], row['rating'], row['date'], bank_id))
        
        connection.commit()
        print(f"Inserted {len(df)} reviews for {bank_name} into the database.")
    except oracledb.DatabaseError as e:
        print(f"Error inserting reviews for {bank_name}: {str(e)}")
        connection.rollback()
    finally:
        cursor.close()